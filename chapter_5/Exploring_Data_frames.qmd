---
title: "Exploring Data Frames"
format: html
editor: visual
---

## Aaron Freeman | Feb 12th, 2024

### swcarpentry r-novice tutorial

#### https://swcarpentry.github.io/r-novice-gapminder/05-data-structures-part2.html

## Exploring Data Frames

### Adding columns and rows in data frames

We can add columns to dataframes, start by making a vector

```r
age <- c(2,3,5)
cats #already existing dataframe
```

Then we can add a column via:

```r
cbind(cats,age)
```

Note that the new vector has to have the same number of entriest as the number of rows in the data frame.

Check the amount of rows in the dataframe with

```r
nrow(cats)
```

cats has 3 rows

```r
length(age)
```

For this combination to work, nrow(cats) = length(age)

```r
age <- c(2,3,5)
cats <- cbind(cats, age)
```

This is how to add a new row. 

```r
newRow <- list("tortoiseshell", 3.3, TRUE, 9)
cats <- rbind(cats, newRow)
```

Now lets remove rows

```r
cats [-4, ]
```

Now lets remove columns

```r
cats [,-4]
```

Alternatively, we can drop the column by using the index name and the %in% operator. The %in% operator goes through each element of its left arguments, in this case the names of cats

```r
drop <- names(cats) %in% c("age")
cats[,!drop]
```

### Appending to a data frame

The key to remember when adding data is that columns are vectors and rows are lists. We can also glue two data frames together with rbind:

```r
cats <- rbind(cats, cats)
```

### Challenge 1

```{r}
People <- data.frame(first_name = c("aaron"),
                     last_name = "freeman",
                     lucky_number = 86)

Jeff <- c("jeff", "miller", 33)

Sarah <- c("sarah", "preston", 67)

People <- rbind(People, Jeff, Sarah)

People
```

## Realistic example

Lets use the gapminder dataset.

```r
gapminder <- read.csv("data/gapminder_data.csv)
```

Investigate the data using 

```r
str(gapminder)
```
```r
'data.frame':	1704 obs. of  6 variables:
 $ country  : chr  "Afghanistan" "Afghanistan" "Afghanistan" "Afghanistan" ...
 $ year     : int  1952 1957 1962 1967 1972 1977 1982 1987 1992 1997 ...
 $ pop      : num  8425333 9240934 10267083 11537966 13079460 ...
 $ continent: chr  "Asia" "Asia" "Asia" "Asia" ...
 $ lifeExp  : num  28.8 30.3 32 34 36.1 ...
 $ gdpPercap: num  779 821 853 836 740 ...
 ```
 
 An additional method for examining the structure of gapminder is to use the summary function.
 
 ```r
 summary(gapminder)
 ```
 
 ```r
 country               year           pop             continent        
 Length:1704        Min.   :1952   Min.   :6.001e+04   Length:1704       
 Class :character   1st Qu.:1966   1st Qu.:2.794e+06   Class :character  
 Mode  :character   Median :1980   Median :7.024e+06   Mode  :character  
                    Mean   :1980   Mean   :2.960e+07                     
                    3rd Qu.:1993   3rd Qu.:1.959e+07                     
                    Max.   :2007   Max.   :1.319e+09                     
    lifeExp        gdpPercap       
 Min.   :23.60   Min.   :   241.2  
 1st Qu.:48.20   1st Qu.:  1202.1  
 Median :60.71   Median :  3531.8  
 Mean   :59.47   Mean   :  7215.3  
 3rd Qu.:70.85   3rd Qu.:  9325.5  
 Max.   :82.60   Max.   :113523.1  
 ```
 
 Use typeof function to examine the data type of each variable and the dataset
 
 ```r
 typeof(gapminder$year)
 ```
 
 ```r
 typeof(gapminder)
 ```
 
 ```r
 length(gapminder)
 ```
 ^This will tell us the length of how many variables are in the dataframe
 
 You can use nrow and ncol to check the total amount of rows and columns of a dataset
 
 ```r
 nrow(gapminder)
 ncol(gapminder)
 ```
 
 or both at once
 
 ```r
 dim(gapminder)
 ```
 
 Check the titles of the columns using
 
 ```r
 colnames(gapminder)
 ```
 
 Once we are happy, check the first few rows of the data table using
 
 ```r
 head(gapminder)
 ```
 
 ```r
       country year      pop continent lifeExp gdpPercap
1 Afghanistan 1952  8425333      Asia  28.801  779.4453
2 Afghanistan 1957  9240934      Asia  30.332  820.8530
3 Afghanistan 1962 10267083      Asia  31.997  853.1007
4 Afghanistan 1967 11537966      Asia  34.020  836.1971
5 Afghanistan 1972 13079460      Asia  36.088  739.9811
6 Afghanistan 1977 14880372      Asia  38.438  786.1134
```

### Challenge 2

```r
tail(gapminder)
tail(gapminder, n=15)
```

You can also use nested functions

```r
gapminder[sample(nrow(gapminder), 5), ]
```



 
 